// $e = "foo",  bar is unused
$e = "foo", "bar";

// $e = tuple (readonly list)
$e = ("foo", "bar");


// Multi assignment
$a = $b = $c = $d = $e = $f = "foobar";

// function calls
foo.print($a);
foo.print $a;
foo.print $a, "1", $c, "foorbar";

// bang methods
foo.print!($a);
$a = foo.print?

// assign function output to a variable
$b = foo.print $a;
$c, $d = foo.return_double_vals()

$a = "foo"
$a .= "bar";

$a = $a . "bar";


$c = Color("yellow");
$d = Color("blue");


// Conditionals
if ($a == 1) {
    $a += 1;
} else {
    $a -= 1;
}

// Conditional with single statements, without curly brackets
if ($a >= 1) $b++;
if ($a != 1) $b++; else $c++;

// Without parentheses
if $foo.print? $a++;

// function call
$a.reverse();

// "fluid"
$a.reverse.upper.reverse.slice();

// while statement
while ($a) {
    bar.printf("A= %d", $a);
    $a--;
} else {
  foo.print "Nothing ", "to ", "do";
}


// ternary
$a = "foo" ? "bar" : "baz";

// double ternary (order precedence)
$a = $b ? $c : $d ? $e : $f;


// For loop
for ($i=0; $i!=foo.complete?; $i++) {
    io.print $i , "\n";
}


// foreach
foreach SomeObject as $val, $key, $meta {
    io.print $meta.index, "\n";
}

// Is this allowed? we don't return keys in our list. Should it return Null for keys?
foreach string.range("a", "z") as $val, $key {
    io.printf "K: %s  V: %s\n", $key, $val;
}

foreach ["a", "b", "c" ] as $val {
}


$a = Null;      // Null object, evaluates to false
$b = True;      // Boolean object evaluates to true
$c = False;     // Boolean object evaluates to false



class Foo {
    method ctor() {
        io.print "Called when initializing";
    }

    method dtor() {
        io.print "Called on destruction";
    }

    static method callme() {
        io.print "Static call!";
    }

    public method foo1(String $a, Foo $b) {
        return "foobar";
    }

    private method foo2() {
        return self, "foo";
    }
}

$foo = Foo();       // Auto calls ctor()
$foo.destroy();     // Auto calls dtor()

Foo.callme();      // Is this a static call?
