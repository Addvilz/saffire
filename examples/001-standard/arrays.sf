/*
 * Array examples
 */


// Everything is a class. No global functions, so print etc should be done through an io class. This could either
// be loaded explicitly or implicitly. We prefer explicit, so "use io". Some classes like string, int etc should
// always be available and loaded implicitly.
use io;

$a = [ "1", 1, "4", 5.0 ];
$b = [ "a" => "1", "b" ];      // "a" => "1",  0 => "b"

$a.length        number of elements
$a.has($s)       has $a got key $s?
$a.contains($s)  has $a got value $s?
$a.remove()      remove (index)
$a.insert()      insert (on this index, shift up)
$a.shift
$a.unshift
$a.push          push element
$a.pop           pop element
$a.json          return string json

$alphabet = array.range('a','z');


// See foreach.sf for more info on handling interatorable classes

foreach $a as value, key, meta {
    // $meta.index : how many have we done (0..length)
    if ($meta.index == 0) {
        io.print("This is the first");
    }

    // $meta.left : how many are left (length..0)
    if ($meta.left == 0) {
        io.print("This will be the last one");
    }

    io.printf("Key: %s   Val: %s\n", $key, $val);

    // meta object(immutable)
    //   meta.index   0-based index (int)
    //   meta.first   true when first element (bool)
    //   meta.last    true when last element (bool)
    //   meta.left    how many elements are left (if available) (int)
    //   meta.count   number of elements (if available!) (int)
    //   meta.key     key (mixed, or only string?)
    //   meta.value   value (mixed)
}





