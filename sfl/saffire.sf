import io;

defined_in_saffire = 1;

/**
 * This is the saffire class.
 */
class saffire {

    /**
     * Returns the saffire version
     */
    static public method version() {
        return ::_sfl::saffire::saffire.version();
    }

    /**
     * Returns the git SHA commit that is used for compiling this version
     */
    static public method git_revision() {
        return ::_sfl::saffire::saffire.git_revision();
    }

    /**
     * Called when an exception has been thrown, but not handled
     */
    static public method uncaughtExceptionHandler(exception e) {
        io.print("                         _   _                 \n");
        io.print("                        | | (_)                \n");
        io.print("  _____  _____ ___ _ __ | |_ _  ___  _ __      \n");
        io.print(" / _ \\ \\/ / __/ _ \\ `_ \\| __| |/ _ \\| `_ \\     \n");
        io.print("|  __/>  < (_|  __/ |_) | |_| | (_) | | | |    \n");
        io.print(" \\___/_/\\_\\___\\___| .__/ \\__|_|\\___/|_| |_|    \n");
        io.print("                  | |                          \n");
        io.print("                  |_|                          \n");
        io.print("\n");
        io.print("-------------------------------------------\n");
        io.print("  File: ", e.getFile(), " (", e.getLine(), ")\n");
        io.print("  Code: ", e.getCode(), "\n");
        io.print("  Mesg: ", e.getMessage(), "\n");
        io.print("-------------------------------------------\n");
        io.print("\n");
        io.print("-------------------------------------------\n");
        io.print("Here will be a backtrace very soon...\n");
        io.print("-------------------------------------------\n");

        return e.getCode();
    }

    /**
     *
     */
    static public method getLocale() {
        return ::_sfl::saffire::saffire.get_locale();
    }

    /**
     *
     */
    static public method setLocale(string locale) {
        return ::_sfl::saffire::saffire.set_locale(locale);
    }


    /**
     * Returns the current server API, could be "fastcgi", "cli", "repl" or "unknown"
     */
    static public method sapi() {
        return ::_sfl::saffire::saffire.sapi();
    }

    /**
     * Returns true when the debugger is activated
     */
    static public method debug() {
        return ::_sfl::saffire::saffire.debug();
    }


// // Returns list of all loaded modules
// public method modules() {}

}


